{"ast":null,"code":"var _jsxFileName = \"/Users/ppatel/Documents/GitHub/React-Projects/jiffy/src/App.js\";\nimport React, { Component } from 'react';\nimport loader from \"./images/loader.svg\"; // Header Component\n\nconst Header = () => React.createElement(\"div\", {\n  className: \"header grid\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  className: \"title\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, \"Jiffy\"));\n\nconst UserHint = ({\n  loading,\n  hintText\n}) => React.createElement(\"div\", {\n  className: \"user-hint\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, loading ? React.createElement(\"img\", {\n  className: \"block mx-auto\",\n  src: loader,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}) : React.createElement(\"span\", {\n  className: \"\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, hintText));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchGiphy = async searchTerm => {\n      //First we try our fetch\n      try {\n        //here we use the await keyword to wait for our response to comeback.\n        const response = await fetch('https://api.giphy.com/v1/gifs/search?api_key=dmo1TAE8ufvIIqWpugW6aTY15isD27Sd&q=cat&limit=250&offset=0&rating=G&lang=en'); // here we convert our raw response into json data\n\n        const data = await response.json();\n        console.log(data); // If fetch fails, we catch it down here.\n      } catch (error) {}\n    };\n\n    this.handleChange = event => {\n      const {\n        value\n      } = event.target; // console.log(event.target.value);\n      // by setting the search term in our state and also using that\n      // on the input as the value, we have created what is called\n      // a controlled input\n\n      this.setState((prevState, props) => ({ //We take our old props and spread them out here\n        ...prevState,\n        // then we overwrite the ones we want after\n        searchTerm: value,\n        hintText: value.length > 2 ? `Hit Enter to search ${value}` : ''\n      })); // if(value.length > 2){\n      // \t// console.log(\"this is valid search term\");\n      // } \n    };\n\n    this.handleKeyPress = event => {\n      const {\n        value\n      } = event.target;\n      console.log(event.key);\n\n      if (value.length > 2 && event.key === 'Enter') {\n        // alert(`search for ${value}`);\n        //here we call our searchGiphy function using the search term.\n        this.searchGiphy(value);\n      } else {\n        if (event.key === 'Enter') {\n          alert(`Please enter more than 2 characters`);\n        }\n      }\n    };\n\n    this.state = {\n      searchTerm: '',\n      hintText: ``\n    };\n  } // We awnt a function that searches the giphy api using\n  // fetch and puts the search term into the query url and\n  // then we can do something with the results\n  //We can also write async methods into our components\n  //that let us use the async/await style of function\n\n\n  render() {\n    const {\n      searchTerm\n    } = this.state; //const searchTerm = this.state.searchTerm\n\n    return React.createElement(\"div\", {\n      className: \"page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"search grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input grid-item\",\n      placeholder: \"Type Something\",\n      onChange: this.handleChange,\n      onKeyPress: this.handleKeyPress,\n      value: searchTerm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(UserHint, Object.assign({}, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ppatel/Documents/GitHub/React-Projects/jiffy/src/App.js"],"names":["React","Component","Header","UserHint","loading","hintText","loader","App","constructor","props","searchGiphy","searchTerm","response","fetch","data","json","console","log","error","handleChange","event","value","target","setState","prevState","length","handleKeyPress","key","alert","state","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport loader from './images/loader.svg'\n\n\n// Header Component\nconst Header = () => (\n\t<div className=\"header grid\">\n\t\t<h1 className=\"title\">Jiffy</h1>\n\n\t</div>\n\n);\n\nconst UserHint = ({loading, hintText}) => (\n\t<div className=\"user-hint\">\n\t\t{\tloading ? \n\t\t\t<img className=\"block mx-auto\" src={loader} /> : \n\t\t\t<span className=\"\">{hintText}</span>\n\t\t}\n\t</div>\n\n)\n\nclass App extends Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tsearchTerm: '',\n\t\t\thintText: ``\n\t\t}\n\t}\n\n\t// We awnt a function that searches the giphy api using\n\t// fetch and puts the search term into the query url and\n\t// then we can do something with the results\n\n\t//We can also write async methods into our components\n\t//that let us use the async/await style of function\n\n\tsearchGiphy = async searchTerm => {\n\t\t//First we try our fetch\n\t\ttry{\n\t\t\t//here we use the await keyword to wait for our response to comeback.\n\t\t\tconst response = await fetch('https://api.giphy.com/v1/gifs/search?api_key=dmo1TAE8ufvIIqWpugW6aTY15isD27Sd&q=cat&limit=250&offset=0&rating=G&lang=en');\n    \t\t\n    \t\t// here we convert our raw response into json data\n    \t\tconst data = await response.json();\n    \t\tconsole.log(data);\n\n\t\t  // If fetch fails, we catch it down here.\n\t\t} catch (error) {\n\n\t\t}\n\t}\n\n\n\n\n\t// with create-react-app we can write our methods as arrow functions,\n\t// meaning we don't need the constructor and bind\n\n\thandleChange = event => {\n\t\t\n\n\t\tconst {value} = event.target; // console.log(event.target.value);\n\n\t\t// by setting the search term in our state and also using that\n\t\t// on the input as the value, we have created what is called\n\t\t// a controlled input\n\t\tthis.setState((prevState, props) => ({\n\n\t\t\t\t//We take our old props and spread them out here\n\t\t\t\t...prevState,\n\t\t\t\t// then we overwrite the ones we want after\n\t\t\t\tsearchTerm: value,\n\t\t\t\thintText: value.length > 2 ? `Hit Enter to search ${value}` : ''\n\n\n\t\t\t})\n\n\t\t)\n\n\n\n\t\t// if(value.length > 2){\n\t\t// \t// console.log(\"this is valid search term\");\n\t\t// } \n\t};\n\n\t//When we have 2 or more chareacters in our search box\n\t// and we have also pressed enter, we then want to run search.\n\n\thandleKeyPress = event => {\n\t\tconst {value} = event.target\n\t\tconsole.log(event.key);\n\n\t\tif(value.length > 2 && event.key === 'Enter'){\n\t\t\t// alert(`search for ${value}`);\n\t\t\t//here we call our searchGiphy function using the search term.\n\t\t\tthis.searchGiphy(value);\n\n\t\t} else {\n\t\t\tif(event.key === 'Enter'){\n\t\t\t\talert(`Please enter more than 2 characters`);\n\t\t\t}\n\t\t}\n\t};\n\n\n\t\n\trender(){\n\t\tconst {searchTerm} = this.state //const searchTerm = this.state.searchTerm\n\t  \treturn (\n\t\t    <div className=\"page\">\n\t\t      \t<Header />\t\t  \t\t\n\t\t  \t\t{/*Search Box*/}\n\t\t  \t\t<div className=\"search grid\">\n\t\t  \t\t\t{/*Our Stack of GIF images*/}\n\t\t  \t\t\t<input \n\t\t  \t\t\t\ttype=\"text\" \n\t\t  \t\t\t\tclassName=\"input grid-item\" \n\t\t  \t\t\t\tplaceholder=\"Type Something\" \n\t\t  \t\t\t\tonChange={this.handleChange}\n\t\t  \t\t\t\tonKeyPress={this.handleKeyPress}\n\t\t  \t\t\t\tvalue={searchTerm}\n\t\t  \t\t\t/>\n\t\t  \t\t</div>\n\t\t  \t\t{/*Here we pass our userHint all of our state using a spread*/}\n\t\t  \t\t<UserHint {...this.state} />\n\n\t\t    </div>\n  \t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}