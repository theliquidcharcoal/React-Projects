{"ast":null,"code":"var _jsxFileName = \"/Users/ppatel/Documents/GitHub/React-Projects/jiffy/src/App.js\";\nimport React, { Component } from 'react';\nimport loader from \"./images/loader.svg\";\nimport Gif from './gif-comp.js';\nimport clearIcon from \"./images/close-icon.svg\"; // Function for Random Selection \n\nconst randomSelect = arr => {\n  const randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n  console.log(arr[randIndex]);\n}; // Header Component\n// We pick out our props inside the header component\n// we can pass down functions as props as well as things\n// like numbers, strings, arrays or objects.\n\n\nconst Header = ({\n  clearSearch,\n  hasResult\n}) => React.createElement(\"div\", {\n  className: \"header grid\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, hasResult ? React.createElement(\"button\", {\n  onClick: clearSearch,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, React.createElement(\"img\", {\n  src: clearIcon,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n})) : React.createElement(\"h1\", {\n  className: \"title\",\n  onClick: clearSearch,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}, \"Jiffy\"));\n\nconst UserHint = ({\n  loading,\n  hintText\n}) => React.createElement(\"div\", {\n  className: \"user-hint\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}, loading ? React.createElement(\"img\", {\n  className: \"block mx-auto\",\n  src: loader,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}) : React.createElement(\"span\", {\n  className: \"\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, hintText));\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // create a ref to store the textInput DOM element\n\n    this.searchGiphy = async searchTerm => {\n      //First we try our fetch\n      this.setState({\n        // Here we set our loading state to be true\n        // and this will show the spinner at the bottom\n        loading: true\n      });\n\n      try {\n        //here we use the await keyword to wait for our response to comeback.\n        const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=dmo1TAE8ufvIIqWpugW6aTY15isD27Sd&q=${searchTerm}&limit=250&offset=0&rating=G&lang=en`); // here we convert our raw response into json data\n        // const {data} gets the .data part of our response\n\n        const {\n          data\n        } = await response.json(); // Here we check if the array of result is empty\n        // if it is, we throw an error which will stop the\n        // code here and handle it in the catch area\n\n        if (!data.length) {\n          throw `Nothing found for ${searchTerm}`;\n        } // hrere we grab random result from our images\n\n\n        const randomGif = randomSelect(data); // console.log({randomGif});\n        // console.log(data)\n\n        this.setState((prevState, props) => ({ ...prevState,\n          // get the first result and put in the state.\n          gif: randomGif,\n          // Here we use our spread to take the previous gifs and \n          // spread them out, and then add our new random gif.\n          // onto the end of the gifs array.\n          gifs: [...prevState.gifs, randomGif],\n          //we turnoff our loading spinner again\n          loading: false,\n          hintText: `Hit enter to see more ${searchTerm}`\n        })); // If fetch fails, we catch it down here.\n      } catch (error) {\n        this.setState((prevState, props) => ({ ...prevState,\n          hintText: `Ughhh Crap! Try Google ${searchTerm}.`,\n          loading: false\n        }));\n        console.log(error);\n      }\n    };\n\n    this.handleChange = event => {\n      const {\n        value\n      } = event.target; // console.log(event.target.value);\n      // by setting the search term in our state and also using that\n      // on the input as the value, we have created what is called\n      // a controlled input\n\n      this.setState((prevState, props) => ({ //We take our old props and spread them out here\n        ...prevState,\n        // then we overwrite the ones we want after\n        searchTerm: value,\n        hintText: value.length > 2 ? `Hit Enter to search ${value}` : ''\n      })); // if(value.length > 2){\n      // \t// console.log(\"this is valid search term\");\n      // } \n    };\n\n    this.handleKeyPress = event => {\n      const {\n        value\n      } = event.target;\n      console.log(event.key);\n\n      if (value.length > 2 && event.key === 'Enter') {\n        // alert(`search for ${value}`);\n        //here we call our searchGiphy function using the search term.\n        this.searchGiphy(value);\n      } else {\n        if (event.key === 'Enter') {\n          alert(`Please enter more than 2 characters`);\n        }\n      }\n    };\n\n    this.clearSearch = () => {\n      this.setState((prevState, props) => ({ ...prevState,\n        searchTerm: '',\n        hintText: '',\n        gifs: []\n      })); // Here we grab the input and then focus the cursor back into it.\n\n      this.textInput.current.focus();\n    };\n\n    this.textInput = React.createRef();\n    this.state = {\n      loading: false,\n      searchTerm: '',\n      hintText: '',\n      gif: null,\n      // We have an array of GIFs here\n      gifs: []\n    };\n  } // We awnt a function that searches the giphy api using\n  // fetch and puts the search term into the query url and\n  // then we can do something with the results\n  //We can also write async methods into our components\n  //that let us use the async/await style of function\n\n\n  render() {\n    const {\n      searchTerm,\n      gifs\n    } = this.state; //const searchTerm = this.state.searchTerm\n    // Here \n\n    const hasResult = gifs.length;\n    return React.createElement(\"div\", {\n      className: \"page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(Header, {\n      clearSearch: this.clearSearch,\n      hasResult: hasResult,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"search grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input db py3\",\n      placeholder: \"Type Something\",\n      onChange: this.handleChange,\n      onKeyPress: this.handleKeyPress,\n      value: searchTerm,\n      refs: this.textInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), this.state.gifs.map(gif => React.createElement(Gif, Object.assign({}, gif, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    })))), React.createElement(UserHint, Object.assign({}, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ppatel/Documents/GitHub/React-Projects/jiffy/src/App.js"],"names":["React","Component","Gif","randomSelect","arr","randIndex","Math","floor","random","length","console","log","Header","clearSearch","hasResult","clearIcon","UserHint","loading","hintText","loader","App","constructor","props","searchGiphy","searchTerm","setState","response","fetch","data","json","randomGif","prevState","gif","gifs","error","handleChange","event","value","target","handleKeyPress","key","alert","textInput","current","focus","createRef","state","render","map"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport loader from './images/loader.svg';\nimport Gif from './gif-comp.js';\nimport clearIcon from './images/close-icon.svg';\n\n// Function for Random Selection \nconst randomSelect = arr => {\n\tconst randIndex = Math.floor(Math.random() * arr.length);\n\treturn arr[randIndex]\n\tconsole.log(arr[randIndex])\n}\n\n\n\n// Header Component\n\n// We pick out our props inside the header component\n// we can pass down functions as props as well as things\n// like numbers, strings, arrays or objects.\nconst Header = ({clearSearch, hasResult}) => (\n\t<div className=\"header grid\">\n\n\t\t{hasResult \n\t\t\t? \n\t\t\t<button onClick={clearSearch}>\n\t\t\t\t<img src={clearIcon} /> \n\t\t\t</button>\n\t\t\t: \n\t\t\t<h1 className=\"title\" onClick={clearSearch} >Jiffy</h1> }\n\n\t</div>\n\n);\n\nconst UserHint = ({loading, hintText}) => (\n\t<div className=\"user-hint\">\n\t\t{\tloading ? \n\t\t\t<img className=\"block mx-auto\" src={loader} /> : \n\t\t\t<span className=\"\">{hintText}</span>\n\t\t}\n\t</div>\n\n)\n\nclass App extends Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\n\t\t// create a ref to store the textInput DOM element\n\t\tthis.textInput = React.createRef();\n\t\t\n\t\tthis.state = {\n\t\t\tloading: false,\n\t\t\tsearchTerm: '',\n\t\t\thintText: '',\n\t\t\tgif: null,\n\t\t\t// We have an array of GIFs here\n\t\t\tgifs: []\n\t\t}\n\t}\n\n\t// We awnt a function that searches the giphy api using\n\t// fetch and puts the search term into the query url and\n\t// then we can do something with the results\n\n\t//We can also write async methods into our components\n\t//that let us use the async/await style of function\n\n\tsearchGiphy = async searchTerm => {\n\t\t//First we try our fetch\n\t\tthis.setState({\n\t\t\t// Here we set our loading state to be true\n\t\t\t// and this will show the spinner at the bottom\n\t\t\tloading: true\n\t\t});\n\t\ttry{\n\t\t\t//here we use the await keyword to wait for our response to comeback.\n\t\t\tconst response = await fetch(\n\t\t\t\t`https://api.giphy.com/v1/gifs/search?api_key=dmo1TAE8ufvIIqWpugW6aTY15isD27Sd&q=${searchTerm}&limit=250&offset=0&rating=G&lang=en`\n\t\t\t);\n    \t\t\n    \t\t// here we convert our raw response into json data\n    \t\t// const {data} gets the .data part of our response\n    \t\tconst {data} = await response.json();\n\n    \t\t// Here we check if the array of result is empty\n    \t\t// if it is, we throw an error which will stop the\n    \t\t// code here and handle it in the catch area\n    \t\tif(!data.length){\n    \t\t\tthrow `Nothing found for ${searchTerm}`\n    \t\t}\n\n\n    \t\t// hrere we grab random result from our images\n    \t\tconst randomGif = randomSelect(data);\n    \t\t// console.log({randomGif});\n    \t\t// console.log(data)\n\n\n    \t\tthis.setState((prevState, props) => ({\n    \t\t\t...prevState,\n    \t\t\t// get the first result and put in the state.\n    \t\t\tgif: randomGif,\n    \t\t\t// Here we use our spread to take the previous gifs and \n    \t\t\t// spread them out, and then add our new random gif.\n    \t\t\t// onto the end of the gifs array.\n    \t\t\tgifs: [...prevState.gifs, randomGif],\n    \t\t\t//we turnoff our loading spinner again\n    \t\t\tloading: false,\n    \t\t\thintText: `Hit enter to see more ${searchTerm}`\n\n    \t\t}))\n\n\t\t  // If fetch fails, we catch it down here.\n\t\t} catch (error) {\n\t\t\tthis.setState((prevState, props) => ({\n\t\t\t\t...prevState,\n\t\t\t\thintText: `Ughhh Crap! Try Google ${searchTerm}.`,\n\t\t\t\tloading: false\n\t\t\t}))\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n\n\n\n\n\t// with create-react-app we can write our methods as arrow functions,\n\t// meaning we don't need the constructor and bind\n\n\thandleChange = event => {\n\t\t\n\n\t\tconst {value} = event.target; // console.log(event.target.value);\n\n\t\t// by setting the search term in our state and also using that\n\t\t// on the input as the value, we have created what is called\n\t\t// a controlled input\n\t\tthis.setState((prevState, props) => ({\n\n\t\t\t\t//We take our old props and spread them out here\n\t\t\t\t...prevState,\n\t\t\t\t// then we overwrite the ones we want after\n\t\t\t\tsearchTerm: value,\n\t\t\t\thintText: value.length > 2 ? `Hit Enter to search ${value}` : ''\n\n\n\t\t\t})\n\n\t\t)\n\n\n\n\t\t// if(value.length > 2){\n\t\t// \t// console.log(\"this is valid search term\");\n\t\t// } \n\t};\n\n\t//When we have 2 or more chareacters in our search box\n\t// and we have also pressed enter, we then want to run search.\n\n\thandleKeyPress = event => {\n\t\tconst {value} = event.target\n\t\tconsole.log(event.key);\n\n\t\tif(value.length > 2 && event.key === 'Enter'){\n\t\t\t// alert(`search for ${value}`);\n\t\t\t//here we call our searchGiphy function using the search term.\n\t\t\tthis.searchGiphy(value);\n\n\t\t} else {\n\t\t\tif(event.key === 'Enter'){\n\t\t\t\talert(`Please enter more than 2 characters`);\n\t\t\t}\n\t\t}\n\t};\n\n\t// Here we reset our set by clearing everything out,\n\t// Making it default again\n\tclearSearch = () => {\n\t\tthis.setState((prevState, props) => ({\n\t\t\t...prevState,\n\t\t\tsearchTerm: '',\n\t\t\thintText: '',\n\t\t\tgifs: []\n\t\t}));\n\t\t// Here we grab the input and then focus the cursor back into it.\n\t\tthis.textInput.current.focus();\n\n\t}\n\n\n\t\n\trender(){\n\t\tconst {searchTerm, gifs} = this.state //const searchTerm = this.state.searchTerm\n\t\t// Here \n\t\tconst hasResult = gifs.length\n\n\t  \treturn (\n\t\t    <div className=\"page\">\n\t\t      \t<Header clearSearch={this.clearSearch} hasResult={hasResult}/>\t\n\n\t\t  \t\t{/*Search Box*/}\n\t\t  \t\t<div className=\"search grid\">\n\t\t  \t\t\t<input \n\t\t  \t\t\t\ttype=\"text\" \n\t\t  \t\t\t\tclassName=\"input db py3\" \n\t\t  \t\t\t\tplaceholder=\"Type Something\" \n\t\t  \t\t\t\tonChange={this.handleChange}\n\t\t  \t\t\t\tonKeyPress={this.handleKeyPress}\n\t\t  \t\t\t\tvalue={searchTerm}\n\t\t  \t\t\t\trefs={this.textInput}\n\t\t  \t\t\t/>\n\t\t  \t\t\t{/*Our Stack of GIF images\n\t\t  \t\t\t Here we loop over our array of gif images from our state and we create multiple videos from it.*/}\n\t\t  \t\t\t{/*\n\t\t  \t\t\t\tIts only going to render our video when we have a gif in the state, we can test for it using &&\n\t\t  \t\t\t*/}\n\t\t  \t\t\t\n\t\t  \t\t\t{/*\n\t\t  \t\t\t\tgif && <video className=\"db video\" autoPlay={true} loop\n\t\t\t\t\t\t\tsrc={this.state.gif.images.original.mp4} />\n\t\t\t\t\t*/}\n\n\t\t  \t\t\t{this.state.gifs.map(\n\n\t\t  \t\t\t\tgif => (\n\t\t  \t\t\t\t\t<Gif {...gif} />\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t)\n\t  \t\t\t\t)}\n\n\t\t  \t\t</div>\n\t\t  \t\t{/*Here we pass our userHint all of our state using a spread*/}\n\t\t  \t\t<UserHint {...this.state} />\n\n\t\t    </div>\n  \t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}